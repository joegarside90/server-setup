version: "3.7"

########################### NETWORKS
networks:
  traefik_proxy:
     external: true
     name: traefik_proxy
  default:
    driver: bridge

########################### SERVICES
services:
  traefik:
    container_name: traefik
    image: traefik:latest 
    restart: unless-stopped
    command:
      - --global.checkNewVersion=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.mqtt.address=:8883
         # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=ERROR # DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules 
      - --providers.file.watch=true 
        #      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      - traefik_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 8883
        published: 8883
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      # Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" 
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworiginlist=https://$DOMAINNAME"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.traefik-headers.headers.addvaryheader=true" 
      - "traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.$DOMAINNAME" 
      - "traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host"
      - "traefik.http.middlewares.traefik-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.$DOMAINNAME" 
      - "traefik.http.middlewares.traefik-headers.headers.sslforcehost=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000"
      - "traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.traefik-headers.headers.stspreload=true"
      - "traefik.http.middlewares.traefik-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.traefik-headers.headers.framedeny=true"
      - "traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true"
      - "traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin"
      - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"

  pihole:
      container_name: pihole
      image: pihole/pihole:latest
      ports:
        # DNS Ports
        - "53:53/tcp"
        - "53:53/udp"
        # Default HTTP Port
        - "80:80/tcp"
        # Default HTTPs Port. FTL will generate a self-signed certificate
        - "443:443/tcp"
        # Uncomment the below if using Pi-hole as your DHCP Server
        #- "67:67/udp"
      environment:
        # Set the appropriate timezone for your location (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g:
        TZ: 'Europe/London'
        # Set a password to access the web interface. Not setting one will result in a random password being assigned
        FTLCONF_webserver_api_password: 'correct horse battery staple'
        # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
        FTLCONF_dns_listeningMode: 'all'
      # Volumes store your data between container upgrades
      volumes:
        # For persisting Pi-hole's databases and common configuration file
        - './etc-pihole:/etc/pihole'
        # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6. If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration. It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
        #- './etc-dnsmasq.d:/etc/dnsmasq.d'
      cap_add:
        # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
        # Required if you are using Pi-hole as your DHCP server, else not needed
        - NET_ADMIN
        # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
        - SYS_TIME
        # Optional, if Pi-hole should get some more processing time
        - SYS_NICE
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pihole.rule=Host(`pihole.local`)"
        - "traefik.http.services.pihole.loadbalancer.server.port=80"
        - "traefik.http.routers.pihole.entrypoints=web"
      restart: unless-stopped

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    restart: unless-stopped
    networks:
      - traefik_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "8096:8096"
      - "8920:8920"
    volumes:
      - $DOCKERDIR/jellyfin/config:/config
      - $DOCKERDIR/jellyfin/cache:/cache
      - /mnt/tank/n54l/multimedia:/media
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"     
      - "traefik.http.routers.jellyfin-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`jf.$DOMAINNAME`,`jellyfin.$DOMAINNAME`)"
      - "traefik.http.routers.jellyfin-rtr.tls=true"
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096"

  homeassistant:
    container_name: homeassistant
    image: homeassistant/home-assistant:stable
    restart: unless-stopped
    networks:
      - traefik_proxy
    security_opt:
      - no-new-privileges:true 
    volumes:
      - $DOCKERDIR/homeassistant:/config
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"     
      - "traefik.http.routers.hass-rtr.entrypoints=https"
      - "traefik.http.routers.hass-rtr.rule=Host(`hass.$DOMAINNAME`)"
      - "traefik.http.routers.hass-rtr.tls=true"      
      - "traefik.http.routers.hass-rtr.middlewares=chain-no-auth@file" # No Authentication     
      - "traefik.http.routers.hass-rtr.service=hass-svc"
      - "traefik.http.services.hass-svc.loadbalancer.server.port=8123"

  cloudflare-ddns:
    container_name: cloudflare-ddns
    image: oznu/cloudflare-ddns:latest
    restart: unless-stopped
    environment:
      - API_KEY=$CLOUDFLARE_DDNS
      - ZONE=tripp.me.uk
      - SUBDOMAIN=vpn
      - PROXIED=false